name: Deploy Lambda with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Create builds directory
        run: mkdir -p builds

      - name: Zip secret_lambda
        run: |
          cd secret_lambda
          zip -r ../builds/secret_lambda.zip .

      - name: Zip email_template
        run: |
          cd email_template
          zip -r ../builds/email_template.zip .

      - name: Delete existing IAM roles and policies if they exist
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1   # replace with your region
        run: |
          set -e

          # Delete lambda1-role if exists
          if aws iam get-role --role-name lambda1-role >/dev/null 2>&1; then
            echo "Deleting lambda1-role..."
            for policy_arn in $(aws iam list-attached-role-policies --role-name lambda1-role --query 'AttachedPolicies[].PolicyArn' --output text); do
              aws iam detach-role-policy --role-name lambda1-role --policy-arn "$policy_arn"
            done
            aws iam delete-role --role-name lambda1-role
          fi

          # Delete lambda2-role if exists
          if aws iam get-role --role-name lambda2-role >/dev/null 2>&1; then
            echo "Deleting lambda2-role..."
            for policy_arn in $(aws iam list-attached-role-policies --role-name lambda2-role --query 'AttachedPolicies[].PolicyArn' --output text); do
              aws iam detach-role-policy --role-name lambda2-role --policy-arn "$policy_arn"
            done
            aws iam delete-role --role-name lambda2-role
          fi

          # Delete the custom policy LambdaEmailGetTemplate if exists
          policy_arn=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='LambdaEmailGetTemplate'].Arn" --output text)
          if [ -n "$policy_arn" ]; then
            echo "Deleting policy LambdaEmailGetTemplate..."
            for role_name in $(aws iam list-entities-for-policy --policy-arn "$policy_arn" --query 'PolicyRoles[].RoleName' --output text); do
              aws iam detach-role-policy --role-name "$role_name" --policy-arn "$policy_arn"
            done
            aws iam delete-policy --policy-arn "$policy_arn"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ github.workspace }}/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ github.workspace }}/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ github.workspace }}/terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}